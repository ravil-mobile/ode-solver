from numpy import array, zeros
from .abstract import AbstractMethod


class SIFIRK32_B2x2_dmpD4(AbstractMethod):
    def __init__(self):
        super().__init__()


    def adjust_data_structure(self):

        # change possible
        self.method_data["expl1stg"] = 0
        self.method_data["expl_meth"] = 0
        self.method_data["pureWmeth"] = 1
        self.method_data["extWmeth"] = 0
        self.method_data["ynxtLstStg"] = 1
        self.method_data["errInGo"] = 1
        self.method_data["takeErrStage"] = 0
        self.method_data["tryT2"] = 0
        self.method_data["useimplf0"] = 0
        self.method_data["itercount"] = array([2, 2, 1, 1, 1, 1])


        self.method_data["t_Dinput_exact"] = 1
        self.method_data["order"] = 2
        self.method_data["poldeg"] = 2
        self.method_data["abl_r"] = 1
        self.method_data["locerr_pot"] = 3


        # time data(without any expl1stg)
        cs = array([1.715728752538099023966225515806038428607e-1,
                    1.0e0,
                    8.786796564403574267974669136854528821455e-1,
                    4.686291501015239609586490206322415371443e-1,
                    1.0e0,
                    1.0e0])


        # input data
        calA = zeros([6, 6])


        # block data(rowise)
        calAb = array([[1.893398282201787133987334568427264410727e-1,
                        -1.776695296636881100211090526212259821209e-2],
                       [6.035533905932737622004221810524245196424e-1,
                        3.964466094067262377995778189475754803576e-1]])

        # scilab: calA(1: 2, 1: 2) = calAb
        calA[0:2, 0:2] =  calAb



        # block transformation data
        T = array([[9.855985596534887808753627929529393543086e-1,
                    1.691019787257627481429347680509755569866e-1],
                   [1.691019787257627481429347680509755569866e-1,
                    -9.855985596534887808753627929529393543086e-1]])


        # todo: ask Tim what he meant
        # special case of symmetric T
        Tinv = T


        Lamb = array([[3.41421356237309504880168872420969807857e0,
                       0.0],
                      [7.242640687119285146405066172629094235709e0,
                       3.41421356237309504880168872420969807857e0]])


        # singly implicit stages
        D1 = array([5.517766952966368811002110905262122598212e-1,
                    3.400974233026807009810018526408966160911e-2,
                    2.928932188134524755991556378951509607152e-1])

        # scilab: calA(3, 1: 3) = D1
        calA[2, 0:3] = D1



        D2 = array([2.006601717798212866012665431572735589273e-1,
                    -3.295331880577403758648950238311399816419e-1,
                    3.046089475659905746231218634109569991438e-1,
                    2.928932188134524755991556378951509607152e-1])

        # scilab: calA(4, 1: 4) = D2
        calA[3, 0:4] = D2



        D3 = array([5.005277320459061824660566084003489408156e-1,
                    -1.591474362593358392619565312942068755205e-1,
                    2.657895591081933642928676458461089734447e-1,
                    9.993692629178381690387663915259800054512e-2,
                    2.928932188134524755991556378951509607152e-1])

        # scelab: calA(5, 1: 5) = D3
        calA[4, 0:5] = D3


        D4 = array([2.987552571153518592232287929054827138167e-1,
                    -8.794533647481147411470974545011133465137e-3,
                    1.180485437763153920357778379849275637534e-1,
                    4.482394009813847683869644808812705554129e-1,
                    -1.491418870390233478336557751218206602332e-1,
                    2.928932188134524755991556378951509607152e-1])

        # scilab: calA(6, 1: 6) = D4
        calA[5, 0: 6] = D4


        # Alpha and Gamma vals for D - stages
        Alph_singl = zeros([4, 6])



        A1 = array([5.946699141100893566993667284213632205364e-1,
                    2.840097423302680700981001852640896616091e-1])

        # scilab: Alph_singl(1, 1: 2) = A1
        Alph_singl[0, 0:2] = A1



        A2 = array([3.828090415820633658677924828064653857131e-1,
                    -2.578412682216569762788194106378676424747e-1,
                    3.436613767411175713696759484636437939058e-1])

        Alph_singl[1, 0:3] = A2




        A3 = array([4.332527696249771960527131838857805790933e-1,
                    5.01779733599319496067519170932485132841e-1,
                    -2.598699871028132315190705807269371522627e-1,
                    3.248374838785165393988382259086714403283e-1])

        # scilab: Alph_singl(3, 1: 4) = A3
        Alph_singl[2, 0:4] = A3


        # A4
        #scilab: Alph_singl(4, 1: 5)=calA(5, 1: 5);
        Alph_singl[3, 0:5] = calA[4, 0: 5]


        #scilab: Alph_singl_sum = cs(3:6)';
        Alph_singl_sum = cs[2:6]



        # Gam_singl without diagonal gamma
        Gam_singl = zeros([4, 6])



        G1 = array([-4.289321881345247559915563789515096071519e-2,
                    -2.5e-1])

        # scilab: Gam_singl(1, 1:2) = G1
        Gam_singl[0, 0:2] = G1


        G2 = array([-1.821488698022420792665259396491918267859e-1,
                    -7.169191983608339958607561319327233916728e-2,
                    -3.905242917512699674655408505268679476203e-2])

        # scilab: Gam_singl(2, 1: 3) = G2
        Gam_singl[1, 0:3] = G2


        G3 = array([6.727496242092898641334342451456836172226e-2,
                    -6.609271698586553353294757022266920083616e-1,
                    5.256595462110065958119382265730461257073e-1,
                    -2.249005575867327224949615867560734397832e-1])

        # scilab: Gam_singl(3, 1: 4) = G3
        Gam_singl[2, 0:4] = G3


        G4 = array([-2.017724749305543232428278154948662269988e-1,
                    1.503529026118546918504855567491957420554e-1,
                    -1.477410153318779722570898078611814096913e-1,
                    3.483024746896009514830878417286725548678e-1,
                    - 4.420351058524758234328114130169716209483e-1])

        # scilab: Gam_singl(4, 1: 5) = G4
        Gam_singl[3, 0:5] = G4


        # including diagonal gamma for sum, here cancelation of gammas
        Gam_singl_sum = array([0.0, 0.0, 0.0, 0.0])


        # b vals
        #scilab: bs = [calA(6, 1:6)]
        bs = array(calA[5, 0:6])


        bsadd = array([-6.47980743369643366953516765001650979368e-2,
                       -5.984872644795145526606899881369333165933e-1,
                        4.298097616437267506283948030673935114452e-1,
                        9.993692629178381690387663915259800054512e-2,
                        1.335386508809683218237702224171069025398e-1,
                        0.0])


        # Fix calculated values
        Alpha_subA_TI = array([[8.660254037844386467637231707529361834717e-1,
                                -6.123724356957945245493210186764728479914e-1,
                                0.0,
                                0.0,
                                0.0],
                               [7.39008344562720978571710439042505543229e-1,
                                8.491564441648350740417251458980423492149e-1,
                                1.173333333333333333333333333333333333333e0,
                                0.0,
                                0.0],
                               [-1.018726076422965067953534338141067359152e-2,
                                -2.380141567062167057743688175315864653921e0,
                                -2.040678759166336326529052408742008585708e0,
                                1.109064543025182786157093700403265535711e0, 0],
                               [0.0,
                                0.0,
                                0.0,
                                0.0,
                                1.0]])

        Alp0_m_Alph_subA_a0 = array([])

        neg_invD_Gamm_subA_TI = array([[-4.927992798267443904376813964764696771543e0,
                                        -2.787693700234703594483153610807842505939e0,
                                        0.0,
                                        0.0,
                                        0.0],
                                       [1.971197119306977561750725585905878708617e-1,
                                        -5.575387400469407188966307221615685011878e-1,
                                        4.552284749830793398402251632279597438094e-1,
                                        0.0,
                                        0.0],
                                       [-3.494512286760979987983272882398835148761e0,
                                        -9.129499686187835635010170070949573614754e0,
                                        -8.854035056270843983730057451264671433407e0,
                                        2.621633020418111102689394332567098669898e0,
                                        0.0],
                                       [9.724757392854524737688046516081778878208e-2,
                                        4.370262206831097803291610954249333328076e0,
                                        3.09726607779836269426770084237808194593e0,
                                        -5.818256624927655358800783969940790985363e0,
                                        5.15273880208124690126042209572686608135e0]])

        invD_Gamm_subA_a0 = array([])


        # invD_Gamm_subA_a0 - invDgam0
        invDprod = array([])

        b_invA_TI = array([0.0, 0.0, 0.0, 0.0, 0.0, 1.0])

        # the impact of Digno alt III is exactly here
        bsadd_invA_TI = array([-4.541643286124749965293481389997342216565e-1,
                               1.197559912715806264808318307116538838971e0,
                               8.606577627889002632866286693936546971841e-1,
                               1.856401332223298571805580182078535603424e-1,
                               4.559294729388079015304434163230095744406e-1,
                               0.0])

        Tinv_Ab = array([])

        Tinv_invA_a0 = array([])

        """
        # TODO: come back to this point
        #norm_bsadd_Ainv = norm(bsadd *inv(calA), 2);
        """
        #scilab: norm_bsadd_Ainv = norm(bsadd * inv(calA), 2);
        # todo: norm_bsadd_Ainv = norm(bsadd * inv(calA), 2)

        self.method_data["b_invA_a0mb0"] = array([])
        self.method_data["Tinv_invA_a0"] = array([])
        self.method_data["bsize"] = 2
        self.method_data["ssize"] = 4
        self.method_data["a0"] = array([])
        self.method_data["b0"] = array([])
        self.method_data["bsadd0"] = array([])
